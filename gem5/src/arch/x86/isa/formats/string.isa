// -*- mode:c++ -*-

// Copyright (c) 2007 The Hewlett-Packard Development Company
// All rights reserved.
//
// The license below extends only to copyright in the software and shall
// not be construed as granting a license to any other intellectual
// property including but not limited to intellectual property relating
// to a hardware implementation of the functionality of the software
// licensed hereunder.  You may use the software subject to the license
// terms below provided that you ensure that this notice is replicated
// unmodified and in its entirety in all distributions of the software,
// modified or unmodified, in source code or in binary form.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Gabe Black

//////////////////////////////////////////////////////////////////////////
//
// String Instructions
//
//////////////////////////////////////////////////////////////////////////

def format StringTestInst(*opTypeSet) {{
    allBlocks = OutputBlocks()

    regBlocks = specializeInst(Name, list(opTypeSet), EmulEnv())
    eBlocks = specializeInst(Name + "_E", list(opTypeSet), EmulEnv())
    nBlocks = specializeInst(Name + "_N", list(opTypeSet), EmulEnv())

    for blocks in (regBlocks, eBlocks, nBlocks):
        allBlocks.header_output += blocks.header_output
        allBlocks.decoder_output += blocks.decoder_output
        allBlocks.exec_output += blocks.exec_output

    allBlocks.decode_block = '''
        if (LEGACY_REP) {
            %s
        } else if (LEGACY_REPNE) {
            %s
        } else {
            %s
        }
    ''' % (eBlocks.decode_block, nBlocks.decode_block, regBlocks.decode_block)

    (header_output, decoder_output,
     decode_block, exec_output) = allBlocks.makeList()
}};

def format StringInst(*opTypeSet) {{
    allBlocks = OutputBlocks()

    regBlocks = specializeInst(Name, list(opTypeSet), EmulEnv())
    eBlocks = specializeInst(Name + "_E", list(opTypeSet), EmulEnv())

    for blocks in (regBlocks, eBlocks):
        allBlocks.header_output += blocks.header_output
        allBlocks.decoder_output += blocks.decoder_output
        allBlocks.exec_output += blocks.exec_output

    allBlocks.decode_block = '''
        if (LEGACY_REP) {
            %s
        } else if (LEGACY_REPNE) {
            // The repne prefix is illegal
            return new MicroFault(machInst, "illprefix", 0,
                                  std::make_shared<InvalidOpcode>(), 0);
        } else {
            %s
        }
    ''' % (eBlocks.decode_block, regBlocks.decode_block)

    (header_output, decoder_output,
     decode_block, exec_output) = allBlocks.makeList()
}};
