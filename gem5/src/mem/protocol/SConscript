# -*- mode:python -*-

# Copyright (c) 2009 The Hewlett-Packard Development Company
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Nathan Binkert

import os
import re
import sys

from os.path import isdir, isfile, join as joinpath

from SCons.Scanner import Classic

from gem5_scons import Transform

Import('*')

if env['PROTOCOL'] == 'None':
    Return()

output_dir = Dir('.')
html_dir = Dir('html')
slicc_dir = Dir('../slicc')

sys.path[1:1] = [ Dir('..').srcnode().abspath ]
from slicc.parser import SLICC

slicc_depends = []
for root,dirs,files in os.walk(slicc_dir.srcnode().abspath):
    for f in files:
        if f.endswith('.py'):
            slicc_depends.append(File(joinpath(root, f)))

#
# Use SLICC
#
env["SLICC_PATH"] = protocol_dirs
slicc_scanner = Classic("SliccScanner", ['.sm', '.slicc'], "SLICC_PATH",
                        r'''include[ \t]["'](.*)["'];''')
env.Append(SCANNERS=slicc_scanner)

def slicc_emitter(target, source, env):
    assert len(source) == 1
    filepath = source[0].srcnode().abspath

    slicc = SLICC(filepath, protocol_base.abspath, verbose=False)
    slicc.process()
    slicc.writeCodeFiles(output_dir.abspath, slicc_includes)
    if env['SLICC_HTML']:
        slicc.writeHTMLFiles(html_dir.abspath)

    target.extend([output_dir.File(f) for f in sorted(slicc.files())])
    return target, source

def slicc_action(target, source, env):
    assert len(source) == 1
    filepath = source[0].srcnode().abspath

    slicc = SLICC(filepath, protocol_base.abspath, verbose=True)
    slicc.process()
    slicc.writeCodeFiles(output_dir.abspath, slicc_includes)
    if env['SLICC_HTML']:
        slicc.writeHTMLFiles(html_dir.abspath)

slicc_builder = Builder(action=MakeAction(slicc_action, Transform("SLICC")),
                        emitter=slicc_emitter)

protocol = env['PROTOCOL']
protocol_dir = None
for path in protocol_dirs:
    if os.path.exists(os.path.join(path, "%s.slicc" % protocol)):
        protocol_dir = Dir(path)
        break

if not protocol_dir:
    raise ValueError, "Could not find %s.slicc in protocol_dirs" % protocol

sources = [ protocol_dir.File("%s.slicc" % protocol) ]

env.Append(BUILDERS={'SLICC' : slicc_builder})
nodes = env.SLICC([], sources)
env.Depends(nodes, slicc_depends)

for f in nodes:
    s = str(f)
    if s.endswith('.cc'):
        Source(f)
    elif s.endswith('.py'):
        SimObject(f)

