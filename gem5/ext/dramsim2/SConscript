# -*- mode:python -*-

# Copyright (c) 2013 ARM Limited
# All rights reserved.
#
# The license below extends only to copyright in the software and shall
# not be construed as granting a license to any other intellectual
# property including but not limited to intellectual property relating
# to a hardware implementation of the functionality of the software
# licensed hereunder.  You may use the software subject to the license
# terms below provided that you ensure that this notice is replicated
# unmodified and in its entirety in all distributions of the software,
# modified or unmodified, in source code or in binary form.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Andreas Hansson

import os

Import('main')

# See if we got a cloned DRAMSim2 repo as a subdirectory and set the
# HAVE_DRAMSIM flag accordingly
if not os.path.exists(Dir('.').srcnode().abspath + '/DRAMSim2'):
    main['HAVE_DRAMSIM'] = False
    Return()

# We have got the folder, so add the library and build the wrappers
main['HAVE_DRAMSIM'] = True

# Add the appropriate files. We leave out the trace driven simulator
dram_files = []

def DRAMFile(filename):
    dram_files.append(File('DRAMSim2/' + filename))

DRAMFile('AddressMapping.cpp')
DRAMFile('Bank.cpp')
DRAMFile('BankState.cpp')
DRAMFile('BusPacket.cpp')
DRAMFile('ClockDomain.cpp')
DRAMFile('CommandQueue.cpp')
DRAMFile('IniReader.cpp')
DRAMFile('MemoryController.cpp')
DRAMFile('MemorySystem.cpp')
DRAMFile('MultiChannelMemorySystem.cpp')
DRAMFile('Rank.cpp')
DRAMFile('SimulatorObject.cpp')
DRAMFile('Transaction.cpp')

# DRAMSim2 violates some of the warning flags used by gem5, so
# we explicitly disable them here
dramenv = main.Clone()
dramenv.Append(CCFLAGS=['-Wno-unused-value'])

# If we are using clang, there are more flags to disable
if main['CLANG']:
    dramenv.Append(CCFLAGS=['-Wno-unused-private-field',
                            '-Wno-tautological-undefined-compare'])

# Tell DRAMSim2 to not store any data as this is already covered by
# the wrapper
dramenv.Append(CCFLAGS=['-DNO_STORAGE'])

dramenv.Library('dramsim2', [dramenv.SharedObject(f) for f in dram_files])

main.Prepend(CPPPATH=Dir('.'))
main.Append(LIBS=['dramsim2'])
main.Prepend(LIBPATH=[Dir('.')])
