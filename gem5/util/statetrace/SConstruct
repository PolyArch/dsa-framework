# Copyright (c) 2011 Gabe Black
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Gabe Black

Help('''
To build a version of statetrace suitable to run on a particular ISA, use a
target of the form build/<arch>/statetrace. For example, to build statetrace
for ARM binaries, run:

scons build/arm/statetrace

You may need a cross compiler in order to build statetrace successfully. To
specify an alternative compiler, set the CXX scons argument on the command
line. The CXX environment variable is NOT considered when selecting the
compiler. To override the compiler for a particular target ISA, set the
<arch>CXX scons argument. For example, to build both the AMD64 version and
the ARM version at the same time using the system compiler for the AMD64
version and a cross compiler for arm, your command line would look like the
following:

scons ARMCXX=arm-cross-g++ build/amd64/statetrace build/arm/statetrace

After a successful build, the statetrace binary(binaries) will be located in
the build/<arch>/ directories you specified on the command line.
''')


arches = 'amd64', 'arm', 'i686', 'sparc'

import os

main = Environment()
main.SetOption('duplicate', 'soft-copy')
main['CXXFLAGS'] = "-O3 -ggdb $_CPPINCFLAGS"

main['CXX'] = ARGUMENTS.get('CXX', main['CXX'])

for arch in arches:
    env = main.Clone()
    env['CXX'] = ARGUMENTS.get(arch.upper() + 'CXX', env['CXX'])
    env.Append(CPPFLAGS = '-D__STATETRACE_%s__' % arch.upper())
    Export('env', 'arch')
    env.SConscript('SConscript', variant_dir = os.path.join('build', arch))
