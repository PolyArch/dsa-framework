Input: M [2]
Input: V [2]
Input: Coef
Input: reset

BAR0   = FMul32x2(M0, V0)
BAR1   = FMul32x2(M1, V1)

BAI0   = FMulX32x2(M0, V0)
BAI1   = FMulX32x2(M1, V1)

BA0    = FAddSub32x2(BAR0, BAI0)
BA1    = FAddSub32x2(BAR1, BAI1)

BA = FAdd32x2(BA0, BA1)

ACC   = FAcc32x2(BA, reset)
O     = CplxMulCons(ACC, Coef)

Output: O

----

Input: A
Input: B [2]
Input: C [2]
Input: Signal

ABR0 = FMul32x2(A, B0)
ABR1 = FMul32x2(A, B1)

ABI0 = FMulX32x2(A, B0)
ABI1 = FMulX32x2(A, B1)

AB0  = FSubAdd32x2(ABR0, ABI0)
AB1  = FSubAdd32x2(ABR1, ABI1)

res0 = FSub32x2(C0, AB0)
res1 = FSub32x2(C1, AB1)

R0 = Discard(res0, Signal)
R1 = res1

FIN = Keep(res0, Signal)

Output: R [2]
Output: FIN

----

#pragma group temporal
Input: NORM
Input: HEAD

#normx = sqrt(normx);
#float norm0 = 1. / sqrt(complex_norm(w[0]));
#complex<float> s = -w[0] * norm0;
norm2_ = FMul32x2(HEAD, HEAD)
norm2  = FRed32x2(norm2_)

normx2 = FAdd32x2(NORM, norm2)
normx  = RealSqrt(normx2)

headnorm = RealSqrt(norm2)
s = CplxDivCons(HEAD, headnorm)

#a[i * N + i] = s * normx;
alpha = CplxMulCons(s, normx)
ALPHA = CplxMulCons(alpha, 140723521323008)

#complex<float> u1 = 1.0f / (w[0] - s * normx);
u1    = FSub32x2(HEAD, ALPHA)
U1INV = CplxInvConj(u1)

#tau[i] = -std::conj(s) / u1 / normx;
real = FMul32x2(u1, s)
imag = FMulX32x2(u1, s)
temp = FAddSub32x2(real, imag)
normxinv = RealInv(normx)
TAU0 = CplxMulCons(temp, normxinv)
TAU1 = TAU0

Output: ALPHA
Output: U1INV
Output: TAU0
Output: TAU1

----

Input: In [2]

Out00 = In0
Out01 = In1

Out10 = In0
Out11 = In1

Output: Out0 [2]
Output: Out1 [2]

----

Input: _In [2]

_Out0 = _In0
_Out1 = _In1

Output: _Out [2]
