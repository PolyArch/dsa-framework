# Copyright 2012-2018 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Note that the testcase gdb.dwarf2/dw2-inline-break.exp largely
# mirrors this testcase, and should be updated if this testcase is
# changed.

standard_testfile

if { [prepare_for_testing "failed to prepare" $testfile $srcfile \
          {debug additional_flags=-Winline}] } {
    return -1
}

# Return a string that may be used to match the output of "info break NUM".
#
# Optional arguments:
#
# source    - the name of the source file
# func      - the name of the function
# disp      - the event disposition
# enabled   - enable state
# locs      - number of locations
# line      - source line number (ignored without -source)

proc break_info_1 {num args} {
    global decimal

    # Column delimiter
    set c {[\t ]+}

    # Row delimiter
    set end {[\r\n \t]+}

    # Table header
    set header "[join [list Num Type Disp Enb Address What] ${c}]"

    # Get/configure any optional parameters.
    parse_args [list {source ""} {func ".*"} {disp "keep"} \
		    {enabled "y"} {locs 1} [list line $decimal] \
		    {type "breakpoint"}]

    if {$source != ""} {
	set source "$source:$line"
    }

    # Result starts with the standard header.
    set result "$header${end}"

    # Set up for multi-location breakpoint marker.
    if {$locs == 1} {
	set multi ".*"
    } else {
	set multi "<MULTIPLE>${end}"
    }
    append result "[join [list $num $type $disp $enabled $multi] $c]"

    # Add location info.
    for {set i 1} {$i <= $locs} {incr i} {
	if {$locs > 1} {
	    append result "[join [list $num.$i $enabled] $c].*"
	}

	#  Add function/source file info.
	append result "in $func at .*$source${end}"
    }

    return $result
}

#
# func1 is a static inlined function that is called once.
# The result should be a single-location breakpoint.
#
gdb_test "break func1" \
    "Breakpoint.*at.* file .*$srcfile, line.*"

#
# func2 is a non-static inlined function that is called once.
# The result should be a breakpoint with two locations: the
# out-of-line function and the single inlined instance.
#
gdb_test "break func2" \
    "Breakpoint.*at.*func2.*\\(2 locations\\)"

#
# func3b is a static inlined function that is called once from
# within another static inlined function.  The result should be
# a single-location breakpoint.
#
gdb_test "break func3b" \
    "Breakpoint.*at.* file .*$srcfile, line.*"

#
# func4b is a static inlined function that is called once from
# within a non-static inlined function.  The result should be
# a breakpoint with two locations: the inlined instance within
# the inlined call to func4a in main, and the inlined instance
# within the out-of-line func4a.
#
gdb_test "break func4b" \
    "Breakpoint.*at.*func4b.*\\(2 locations\\)"

#
# func5b is a non-static inlined function that is called once
# from within a static inlined function.  The result should be a
# breakpoint with two locations: the out-of-line function and the
# inlined instance within the inlined call to func5a in main.
#
gdb_test "break func5b" \
    "Breakpoint.*at.*func5b.*\\(2 locations\\)"
#
# func6b is a non-static inlined function that is called once from
# within another non-static inlined function.  The result should be
# a breakpoint with three locations: the out-of-line function, the
# inlined instance within the out-of-line func6a, and the inlined
# instance within the inlined call to func6a in main,
#
gdb_test "break func6b" \
    "Breakpoint.*at.*func6b.*\\(3 locations\\)"

#
# func7b is a static inlined function that is called twice: once from
# func7a, and once from main.  The result should be a breakpoint with
# two locations: the inlined instance within the inlined instance of
# func7a, and the inlined instance within main.
#
gdb_test "break func7b" \
    "Breakpoint.*at.*func7b.*\\(2 locations\\)"

#
# func8b is a non-static inlined function that is called twice: once
# func8a, and once from main.  The result should be a breakpoint with
# three locations: the out-of-line function, the inlined instance
# within the inlined instance of func7a, and the inlined instance
# within main.
#
gdb_test "break func8b" \
    "Breakpoint.*at.*func8b.*\\(3 locations\\)"

#
# func1 is a static inlined function.  The result should be that no
# symbol is found to print.
#
gdb_test "print func1" \
    "No symbol \"func1\" in current context."

#
# func2 is a non-static inlined function.  The result should be that
# one symbol is found to print, and that the printed symbol is called
# "func2".  Note that this does not cover the failure case that two
# symbols were found, but that gdb chose the out-of-line copy to
# print, but if this was failing the "print func1" test would likely
# fail instead.
#
gdb_test "print func2" \
    "\\\$.* = {int \\(int\\)} .* <func2>"

# Test that "info break" reports the location of the breakpoints "inside"
# the inlined functions

set results(1) [break_info_1 1 -source $srcfile -func "func1"]
set results(2) [break_info_1 2 -locs 2 -source $srcfile -func "func2"]
set results(3) [break_info_1 3 -source $srcfile -func "func3b"]
set results(4) [break_info_1 4 -locs 2 -source $srcfile -func "func4b"]
set results(5) [break_info_1 5 -locs 2 -source $srcfile -func "func5b"]
set results(6) [break_info_1 6 -locs 3 -source $srcfile -func "func6b"]
set results(7) [break_info_1 7 -locs 2 -source $srcfile -func "func7b"]
set results(8) [break_info_1 8 -locs 3 -source $srcfile -func "func8b"]

for {set i 1} {$i <= [array size results]} {incr i} {
    send_log "Expecting: $results($i)\n"
    gdb_test "info break $i" $results($i)
}

unset -nocomplain results
